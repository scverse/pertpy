[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "pertpy"
version = "0.7.0"
description = "Perturbation Analysis in the scverse ecosystem."
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
authors = [
    {name = "Lukas Heumos"},
    {name = "Yuge Ji"},
    {name = "Alejandro Tejada"},
    {name = "Johannes Köster"},
    {name = "Emma Dann"},
    {name = "Xinyue Zhang"},
    {name = "Xichen Wu"},
    {name = "Amir Moinfar"},
    {name = "Sergei Rybakov"},
    {name = "Tessa Green"},
    {name = "Stefan Peidli"},
    {name = "Antonia Schumacher"},
    {name = "Lilly May"},
]
maintainers = [
    {name = "Lukas Heumos", email = "lukas.heumos@posteo.net"},
]
urls.Documentation = "https://pertpy.readthedocs.io"
urls.Source = "https://github.com/theislab/pertpy"
urls.Home-page = "https://github.com/theislab/pertpy"

classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Framework :: Jupyter",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Visualization",
]

dependencies = [
    "rich",
    "scanpy[leiden]",
    "muon",
    "requests",
    "scikit-misc",
    "scipy",
    "scvi-tools",
    "adjusttext",
    "toytree",
    "arviz",
    "numpyro",
    "decoupler",
    "ott-jax",
    "sparsecca",
    "openpyxl",
    "pubchempy",
    "pyarrow",
    "blitzgsea"
]

[project.optional-dependencies]
coda = [
    "ete3",
    "pyqt5"  # remove this after ete4 got released
]
dev = [
    "pre-commit",
]
doc = [
    "docutils>=0.8,!=0.18.*,!=0.19.*",
    "sphinx>=4",
    "furo",
    "myst-nb",
    "myst-parser",
    "sphinxcontrib-bibtex>=1.0.0",
    "sphinx-gallery",
    "sphinx-autodoc-typehints",
    "sphinx-copybutton",
    "sphinx-remove-toctrees",
    "sphinx-design",
    "sphinx-last-updated-by-git",
    "sphinx-automodapi",
    "sphinxext-opengraph",
    "pygments",
    "pyenchant",
    "nbsphinx",
    "nbsphinx-link",
    "ipykernel",
    "ipython",
]
test = [
    "pytest",
    "coverage",
]

[tool.hatch.version]
source = "vcs"

[tool.coverage.run]
source_pkgs = ["pertpy"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = "tests"
xfail_strict = true
addopts = [
    "--import-mode=importlib",  # allow using test files with same name
]
markers = [
    "conda: marks a subset of tests to be ran on the Bioconda CI.",
    "extra: marks tests that require extra dependencies."
]
minversion = 6.0
norecursedirs = [ '.*', 'build', 'dist', '*.egg', 'data', '__pycache__']


[tool.ruff]
src = ["src"]
line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    #"D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
    "TCH",  # Typing imports
    "NPY",  # Numpy specific rules
    "PTH"  # Use pathlib
]
ignore = [
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # __magic__ methods are are often self-explanatory, allow missing docstrings
    "D105",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    ## Disable one in each pair of mutually incompatible rules
    # We don’t want a blank line before a class docstring
    "D203",
    # We want docstrings to start immediately after the opening triple quote
    "D213",
    # Imports unused
    "F401",
    # camcelcase imported as lowercase
    "N813",
    # module import not at top level of file
    "E402",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"docs/*" = ["I"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]

[tool.mypy]
strict = false
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true
no_strict_optional = true

[tool.cruft]
skip = [
    "tests",
    "src/**/__init__.py",
    "src/**/basic.py",
    "docs/api.md",
    "docs/changelog.md",
    "docs/references.bib",
    "docs/references.md",
    "docs/notebooks/example.ipynb"
]
